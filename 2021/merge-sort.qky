
  [ this ] is merge-sort.qky

  [ stack ]                     is merge.test  (         --> s       )

  [ ]'[ merge.test put
    [] temp put
    [ dup  [] != while
      over [] != while
      over 0 peek
      over 0 peek
      merge.test share do
      not if dip
        [ 1 split
          temp take
          rot join
          temp put ]
        again ]
      join
      temp take swap join
      merge.test release  ]     is mergewith   (     [ [ --> [       )

  [ stack ]                     is sort.test   (         --> s       )

  [ ]'[ sort.test put
    [ dup size 16 < iff
        [ sortwith [ sort.test share do ] ]
        done
      dup size 2 / split
      swap recurse
      swap recurse
      mergewith [ sort.test share do ] ]
    sort.test release ]         is sortwith    (       [ --> [       )

  [ sortwith > ]                is sort        (       [ --> [       )

  [ sortwith $> ]               is sort$       (       [ --> [       )