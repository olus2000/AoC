var sizes = 0
var stack = 0
var sp = 0
var tos = 0


next::
    input
    gosub *read-num
    cmp $a &d
    goto_if *next
    cmp $a 32
    goto_if *increment
    cmp $a &$
    goto_if *command
end::
    gosub *exit
    gt $sp 0
    goto_if *end
    var tos - 40000000
    var answer = 70000000
    size sizes
    var sp f return
endloop::
    var sp - 1
    var i f sizes $sp
    lt $i $tos
    goto_if *not-better
    gt $i $answer
    goto_if *not-better
    var answer = $i
not-better::
    gt $sp 0
    goto_if *endloop
    println $answer
    exit


increment::
    var tos + $i
    goto *next


command::
    getch
    getch
    var i f return
    cmp $i &l
    goto_if *next
    getch
    getch
    getch
    var i f return
    cmp $i &.
    goto_if *cd-..
    var stack a $tos
    var tos = 0
    var sp + 1
    goto *next

cd-..::
    gosub *exit
    goto *next


exit::
    var sizes a $tos
    var i f stack $sp
    var tos + $i
    var stack r $sp 1
    var sp - 1
    return


read-num::
    var j = 0
    var i = 0
read-num-loop::
    getch
    var a f return
    lt $a &0
    goto_if *read-num-end
    gt $a &9
    goto_if *read-num-end
    var j = 1
    var i * 10
    var i + $a
    var i - 48
    goto *read-num-loop
read-num-end::
    return $i
